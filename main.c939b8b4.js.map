{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","playTable","scoreInfo","startMessage","winMessage","looseMessage","cellLocation","playObject","oldLocation","newLocation","score","coordiX","coordiY","hasMove","randomNumber","min","number","Math","floor","max","random","randomCell","row","column","addCell","field","arrayLocation","key","i","length","push","randomLocation","saveTable","cell","rows","cells","textContent","className","emptySort","array","direct","sort","a","b","x","y","moveCheck","splice","map","el","shift","vertikalShift","newArray","winOrLose","classList","remove","handleMove","move","addEventListener","e","matches","add","join","firstTouch","touches","clientX","clientY","coordiXEnd","coordieYEnd","xDiff","yDiff","touchMove","abs"],"mappings":"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","file":"main.c939b8b4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\nconst playTable = document.querySelector('tbody');\nconst scoreInfo = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst looseMessage = document.querySelector('.message-lose');\nlet cellLocation = [];\nlet playObject = {\n  0: [0, 0, 0, 0],\n  1: [0, 0, 0, 0],\n  2: [0, 0, 0, 0],\n  3: [0, 0, 0, 0],\n};\nconst oldLocation = [];\nconst newLocation = [];\nlet score = 0;\nlet coordiX = null;\nlet coordiY = null;\nlet hasMove = false;\n\nconst randomNumber = () => {\n  const min = 1;\n  const max = 10;\n  let number = Math.floor(Math.random() * (max - min + 1)) + min;\n\n  if (number === 4) {\n    return number;\n  }\n\n  number = 2;\n\n  return number;\n};\n\nconst randomCell = () => {\n  const min = 0;\n  const max = 3;\n  let row = Math.floor(Math.random() * (max - min + 1)) + min;\n  const column = Math.floor(Math.random() * (max - min + 1)) + min;\n\n  if (playObject[row][column] === 0) {\n    return [row, column];\n  }\n\n  if (row >= 3) {\n    row--;\n\n    return [row, column];\n  }\n\n  row++;\n\n  return [row, column];\n};\n\nconst addCell = (field) => {\n  const arrayLocation = [];\n\n  for (const key in field) {\n    for (let i = 0; i < field[key].length; i++) {\n      if (field[key][i] === '') {\n        arrayLocation.push([key, i]);\n      }\n    }\n  }\n\n  if (arrayLocation.length < 1) {\n    return;\n  }\n\n  const randomLocation\n    = Math.floor(Math.random() * (arrayLocation.length - 1 - 0 + 1)) + 0;\n\n  field[arrayLocation[randomLocation][0]][arrayLocation[randomLocation][1]]\n    = randomNumber();\n};\n\nconst saveTable = () => {\n  for (let row = 0; row < 4; row++) {\n    for (let cell = 0; cell < 4; cell++) {\n      if (playObject[row][cell] === 0) {\n        playObject[row][cell] = '';\n        playTable.rows[row].cells[cell].textContent = playObject[row][cell];\n        playTable.rows[row].cells[cell].className = 'field-cell';\n\n        continue;\n      }\n      playTable.rows[row].cells[cell].textContent = playObject[row][cell];\n\n      playTable.rows[row].cells[cell].className\n        = `field-cell field-cell--${playObject[row][cell]}`;\n    }\n  }\n};\n\nconst emptySort = (array, direct) => {\n  array.sort((a, b) => {\n    let x = a;\n    let y = b;\n\n    if (direct === 'right' || direct === 'down') {\n      x = b;\n      y = a;\n    }\n\n    if (x === '') {\n      x = 0;\n    }\n\n    if (y === '') {\n      y = 0;\n    }\n\n    if (y === 0 || '') {\n      return -1;\n    } else if (x === 0 || '') {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n};\n\nconst moveCheck = (array) => {\n  array.splice(0, 16);\n\n  for (const key in playObject) {\n    playObject[key].map(el => {\n      array.push(el);\n    });\n  }\n\n  return array;\n};\n\nconst shift = (direct) => {\n  for (let row = 0; row < 4; row++) {\n    emptySort(playObject[row], direct);\n\n    if (direct === 'left') {\n      for (let cell = 0; cell < 4; cell++) {\n        if (playObject[row][cell] === '') {\n          playObject[row][cell] = 0;\n        }\n\n        if (playObject[row][cell] === playObject[row][cell + 1]) {\n          playObject[row][cell]\n            = playObject[row][cell] + playObject[row][cell + 1];\n          score += playObject[row][cell];\n          playObject[row][cell + 1] = 0;\n\n          emptySort(playObject[row], direct);\n\n          break;\n        }\n      }\n    }\n\n    if (direct === 'right') {\n      for (let cell = 3; cell >= 0; cell--) {\n        if (playObject[row][cell] === '') {\n          playObject[row][cell] = 0;\n        }\n\n        if (playObject[row][cell] === playObject[row][cell - 1]) {\n          playObject[row][cell]\n            = playObject[row][cell] + playObject[row][cell - 1];\n          score += playObject[row][cell];\n          playObject[row][cell - 1] = 0;\n\n          emptySort(playObject[row], direct);\n\n          break;\n        }\n      }\n    }\n  }\n};\n\nconst vertikalShift = (direct) => {\n  if (direct === 'down') {\n    for (let cell = 0; cell < 4; cell++) {\n      const newArray = [];\n\n      for (let row = 0; row < 4; row++) {\n        newArray.push(playObject[row][cell]);\n      }\n\n      emptySort(newArray, direct);\n\n      for (let row = 3; row >= 0; row--) {\n        if (newArray[row] === '') {\n          newArray[row] = 0;\n        }\n\n        if (newArray[row] === newArray[row - 1]) {\n          newArray[row] = newArray[row] + newArray[row - 1];\n          score += newArray[row];\n          newArray[row - 1] = 0;\n        }\n        emptySort(newArray, direct);\n        playObject[row][cell] = newArray[row];\n      }\n    }\n\n    return;\n  }\n\n  for (let cell = 0; cell < 4; cell++) {\n    const newArray = [];\n\n    for (let row = 0; row < 4; row++) {\n      newArray.push(playObject[row][cell]);\n    }\n\n    emptySort(newArray);\n\n    for (let row = 0; row < 4; row++) {\n      if (newArray[row] === '') {\n        newArray[row] = 0;\n      }\n\n      if (newArray[row] === newArray[row + 1]) {\n        newArray[row] = newArray[row] + newArray[row + 1];\n        score += newArray[row];\n        newArray[row + 1] = 0;\n      }\n      emptySort(newArray);\n      playObject[row][cell] = newArray[row];\n    }\n  }\n};\n\nconst winOrLose = (field) => {\n  for (const key in field) {\n    for (let i = 0; i < field[key].length; i++) {\n      if (field[key][i] === 2048) {\n        winMessage.classList.remove('hidden');\n      }\n\n      if (field[key][i] === 0 || field[key][i] === '') {\n        return;\n      }\n    }\n  }\n\n  for (let row = 0; row < 4; row++) {\n    for (let cell = 0; cell < 4; cell++) {\n      if (field[row][cell] === field[row][cell + 1]\n        || field[row][cell] === field[row][cell - 1]) {\n        return;\n      }\n\n      if (row === 0) {\n        if (field[row][cell] === field[row + 1][cell]) {\n          return;\n        }\n      };\n\n      if (row === 1 || row === 2) {\n        if (field[row][cell] === field[row + 1][cell]\n          || field[row][cell] === field[row - 1][cell]) {\n          return;\n        }\n      };\n\n      if (row === 3) {\n        if (field[row][cell] === field[row - 1][cell]) {\n          return;\n        }\n      };\n    }\n  }\n\n  looseMessage.classList.remove('hidden');\n};\n\nconst handleMove = (move) => {\n  switch (move) {\n    case 'ArrowLeft':\n      shift('left');\n      break;\n\n    case 'ArrowRight':\n      shift('right');\n      break;\n\n    case 'ArrowUp':\n      vertikalShift('up');\n      break;\n\n    case 'ArrowDown':\n      vertikalShift('down');\n      break;\n  }\n};\n\nstartButton.addEventListener('click', (e) => {\n  playObject = {\n    0: [0, 0, 0, 0],\n    1: [0, 0, 0, 0],\n    2: [0, 0, 0, 0],\n    3: [0, 0, 0, 0],\n  };\n  score = 0;\n\n  if (startButton.matches('.start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'restart';\n  }\n\n  startMessage.classList.add('hidden');\n  looseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  cellLocation = randomCell();\n\n  playObject[cellLocation[0]][cellLocation[1]] = randomNumber();\n\n  cellLocation = randomCell();\n\n  playObject[cellLocation[0]][cellLocation[1]] = randomNumber();\n\n  saveTable();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  moveCheck(oldLocation);\n\n  handleMove(e.key);\n\n  saveTable();\n\n  moveCheck(newLocation);\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (startButton.matches('.start')) {\n    return;\n  }\n\n  if (oldLocation.join() === newLocation.join()) {\n    return;\n  }\n\n  scoreInfo.textContent = score;\n\n  addCell(playObject);\n  saveTable();\n  winOrLose(playObject);\n});\n\ndocument.addEventListener('touchstart', (e) => {\n  const firstTouch = e.touches[0];\n\n  coordiX = firstTouch.clientX;\n  coordiY = firstTouch.clientY;\n});\n\ndocument.addEventListener('touchmove', (e) => {\n  if (!coordiX || !coordiY) {\n    return;\n  }\n\n  const coordiXEnd = e.touches[0].clientX;\n  const coordieYEnd = e.touches[0].clientY;\n  const xDiff = coordiXEnd - coordiX;\n  const yDiff = coordieYEnd - coordiY;\n  let touchMove = '';\n\n  if (Math.abs(xDiff) >= Math.abs(yDiff)) {\n    if (xDiff > 0) {\n      touchMove = 'ArrowRight';\n    } else {\n      touchMove = 'ArrowLeft';\n    }\n  } else {\n    if (yDiff > 0) {\n      touchMove = 'ArrowDown';\n    } else {\n      touchMove = 'ArrowUp';\n    }\n  }\n  moveCheck(oldLocation);\n\n  handleMove(touchMove);\n\n  saveTable();\n\n  moveCheck(newLocation);\n\n  coordiX = null;\n  coordiY = null;\n  hasMove = true;\n});\n\ndocument.addEventListener('touchend', (e) => {\n  if (!hasMove) {\n    return;\n  }\n\n  if (startButton.matches('.start')) {\n    return;\n  }\n\n  if (oldLocation.join() === newLocation.join()) {\n    return;\n  }\n\n  scoreInfo.textContent = score;\n\n  addCell(playObject);\n  saveTable();\n  winOrLose(playObject);\n  hasMove = false;\n});\n"]}